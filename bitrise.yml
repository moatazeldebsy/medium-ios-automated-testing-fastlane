---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
pipelines:
  pipeline_ui_test_multiple_shards:
    stages:
    - stage_prepare_ui_test: {}
    - stage_ui_test_multiple_shards: {}
  pipeline_ui_test_multiple_devices:
    stages:
    - stage_prepare_ui_test: {}
    - stage_ui_test_multiple_devices: {}
  pipeline_test_shards_5:
    stages:
    - stage_1: {}
    - stage_2: {}
    - stage_3: {}
  pipeline_1gb:
    stages:
    - stage_1gb_artifact: {}
    - stage_2: {}
    - stage_3: {}
  pipeline_test_shards_2:
    stages:
    - stage_1a: {}
    - stage_2a: {}
    - stage_3: {}
  pipeline_multiple_devices:
    stages:
    - stage_1b: {}
    - stage_2b: {}
    - stage_3b: {}
stages:
  stage_prepare_ui_test:
    workflows:
    - ui_test_prepare: {}
  stage_ui_test_multiple_shards:
    workflows:
    - ui_test_shard_1: {}
    - ui_test_shard_2: {}
  stage_ui_test_multiple_devices:
    workflows:
    - ui_test_api26: {}
    - ui_test_api30: {}
  stage_1:
    workflows:
    - pipeline_shards_5: {}
  stage_1gb_artifact:
    workflows:
    - pipeline_1gb_artifact: {}
  stage_1a:
    workflows:
    - pipeline_shards_2: {}
  stage_2:
    workflows:
    - tests_1: {}
    - tests_2: {}
    - tests_3: {}
    - tests_4: {}
    - tests_5: {}
  stage_2a:
    workflows:
    - tests_1: {}
    - tests_2: {}
  stage_3:
    workflows:
    - deploy: {}
  stage_1b:
    workflows:
    - pipeline_multiple_destinations: {}
  stage_2b:
    workflows:
    - test_iPhone_8: {}
    - test_iPhone_8_plus: {}
    - test_iPhone_11: {}
    - test_iPhone_12: {}
    - test_iPhone_13: {}
  stage_3b:
    workflows:
    - deploy: {}
workflows:
  deploy:
    steps:
    - git-clone@6:
        inputs:
        - clone_depth: '100'
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            git clone fdasdfsadf
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_2.*
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            curl https://app.bitrise.io/app/02b457dfd1edcebb/build/start.json --data '{"hook_info":{"type":"bitrise","build_trigger_token":"xQl18Z6vecTrPCZoImW3hA"},"build_params":{"branch":"master","pipeline_id":"pipeline_2"},"triggered_by":"curl"}'
        title: Start another pipeline
    - script@1.1:
        title: Deploy Artifacts
        inputs:
        - content: "#!/usr/bin/env bash\nset -euxo pipefail\n\necho \"==== MOVE FILES
            TO DEPLOY DIR ====\"\n\necho \"$BITRISE_ARTIFACT_PATHS\"\n\ncd /tmp\nMYDIR=`pwd`/tmp/Users/vagrant/git/xcodebuild.xcresult\n\ni=1\n\nIFS='|'
            read -ra FILES <<< \"$BITRISE_ARTIFACT_PATHS\"\n\nfor f in ${FILES[@]}\ndo\n
            \ if [ \"${f: -4}\" = \".zip\" ]; then\n    echo \"Processing $f\"\n\n
            \   rm -f -r tmp\n    mkdir tmp\n    unzip \"$f\" -d tmp\n\n    echo \"--Trainer--\"\n\n
            \   mkdir \"${BITRISE_TEST_RESULT_DIR}/test_${i}\"\n\n    trainer \\\n
            \   --path \"${MYDIR}\" \\\n    --output_directory \"${BITRISE_TEST_RESULT_DIR}/test_${i}\"
            \\\n    || :\n\n    echo \\\n      \"{ \\\"test-name\\\": \\\"Tests ${i}\\\"
            }\" > \\\n      \"${BITRISE_TEST_RESULT_DIR}/test_${i}/test-info.json\"\n\n
            \   ((i++))\n    \n  fi\ndone"
    - deploy-to-bitrise-io@2: {}
  pipeline_1gb_artifact:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cocoapods-install@2: {}
    - git::https://github.com/DamienBitrise/bitrise-test-plan-sharder.git@master:
        title: Bitrise Test Plan Sharder
        inputs:
        - xcode_project: Notes.xcodeproj
        - target: NotesUITests
        - shards: '2'
        - scheme: Notes
        - test_plan: Notes.xctestplan
        - debug_mode: 'true'
        - test_path: ''
        - file_type: ".swift"
    - script@1.1:
        title: Build for Testing
        inputs:
        - content: |+
            set -euxo pipefail
            echo "-- build-for-testing --"

            mkdir DerivedData

            xcodebuild \
            -scheme "Notes" \
            -workspace "Notes.xcworkspace" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPhone 8,OS=latest" \
            -derivedDataPath "${BITRISE_SOURCE_DIR}/DerivedData" \
            build-for-testing

    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            curl http://ipv4.download.thinkbroadband.com/1GB.zip --output "$BITRISE_SOURCE_DIR/1GB_1.zip"

            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_2.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_3.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_4.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_5.zip"
        title: Download Large file
    - script@1.1:
        title: Compress Derived Data
        is_always_run: true
        inputs:
        - content: "set -euxo pipefail\necho \"-- compress --\"\n\nexec zip -0 -qr
            \\\n    \"${BITRISE_SOURCE_DIR}/DerivedData.zip\" \\\n    \"$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/Notes.app\"
            \\\n    \"$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/NotesUITests-Runner.app\"
            \\\n    \"$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Notes_Notes_iphonesimulator13.5-x86_64.xctestrun\"
            \\\n    \"$BITRISE_SOURCE_DIR/Notes.xcworkspace\" \\\n    \"$BITRISE_SOURCE_DIR/Notes.xcodeproj\"
            \\\n    \"$BITRISE_SOURCE_DIR/Notes.xctestplan\" \\\n    \"$BITRISE_SOURCE_DIR/1GB_1.zip\"
            \\\n    \"$BITRISE_SOURCE_DIR/TestShard_0.xctestplan\" \\\n    \"$BITRISE_SOURCE_DIR/TestShard_1.xctestplan\"
            \n\n#    \"$BITRISE_SOURCE_DIR/TestShard_2.xctestplan\" \\\n#    \"$BITRISE_SOURCE_DIR/TestShard_3.xctestplan\"
            \\\n#    \"$BITRISE_SOURCE_DIR/TestShard_4.xctestplan\"\n#    \"$BITRISE_SOURCE_DIR/1GB_1.zip\"
            \\\n"
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: "${BITRISE_SOURCE_DIR}/DerivedData.zip"
    before_run: []
  pipeline_multiple_destinations:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cocoapods-install@2: {}
    - script@1.1:
        title: Build for Testing
        inputs:
        - content: |+
            set -euxo pipefail
            echo "-- build-for-testing --"

            mkdir DerivedData

            xcodebuild \
            -scheme "Notes" \
            -workspace "Notes.xcworkspace" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPhone 8,OS=latest" \
            -derivedDataPath "${BITRISE_SOURCE_DIR}/DerivedData" \
            build-for-testing

    - script@1.1:
        title: Compress Derived Data
        is_always_run: true
        inputs:
        - content: |
            set -euxo pipefail
            echo "-- compress --"

            exec zip -0 -qr \
                "${BITRISE_SOURCE_DIR}/DerivedData.zip" \
                "$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/Notes.app" \
                "$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/NotesUITests-Runner.app" \
                "$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Notes_Notes_iphonesimulator13.5-x86_64.xctestrun" \
                "$BITRISE_SOURCE_DIR/Notes.xcworkspace" \
                "$BITRISE_SOURCE_DIR/Notes.xcodeproj" \
                "$BITRISE_SOURCE_DIR/Notes.xctestplan"
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: "${BITRISE_SOURCE_DIR}/DerivedData.zip"
    before_run: []
  pipeline_shards_2:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cocoapods-install@2: {}
    - git::https://github.com/DamienBitrise/bitrise-test-plan-sharder.git@master:
        title: Bitrise Test Plan Sharder
        inputs:
        - xcode_project: Notes.xcodeproj
        - target: NotesUITests
        - shards: '2'
        - scheme: Notes
        - test_plan: Notes.xctestplan
        - debug_mode: 'true'
        - test_path: ''
        - file_type: ".swift"
    - script@1.1:
        title: Build for Testing
        inputs:
        - content: |+
            set -euxo pipefail
            echo "-- build-for-testing --"

            mkdir DerivedData

            xcodebuild \
            -scheme "Notes" \
            -workspace "Notes.xcworkspace" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPhone 8,OS=latest" \
            -derivedDataPath "${BITRISE_SOURCE_DIR}/DerivedData" \
            build-for-testing

    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # curl http://ipv4.download.thinkbroadband.com/1GB.zip --output "$BITRISE_SOURCE_DIR/1GB_1.zip"

            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_2.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_3.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_4.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_5.zip"
        title: Download Large file
    - script@1.1:
        title: Compress Derived Data
        is_always_run: true
        inputs:
        - content: "set -euxo pipefail\necho \"-- compress --\"\n\nexec zip -0 -qr
            \\\n    \"${BITRISE_SOURCE_DIR}/DerivedData.zip\" \\\n    \"$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/Notes.app\"
            \\\n    \"$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/NotesUITests-Runner.app\"
            \\\n    \"$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Notes_Notes_iphonesimulator13.5-x86_64.xctestrun\"
            \\\n    \"$BITRISE_SOURCE_DIR/Notes.xcworkspace\" \\\n    \"$BITRISE_SOURCE_DIR/Notes.xcodeproj\"
            \\\n    \"$BITRISE_SOURCE_DIR/Notes.xctestplan\" \\\n    \"$BITRISE_SOURCE_DIR/TestShard_0.xctestplan\"
            \\\n    \"$BITRISE_SOURCE_DIR/TestShard_1.xctestplan\" \n\n#    \"$BITRISE_SOURCE_DIR/1GB_1.zip\"
            \\\n"
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: "${BITRISE_SOURCE_DIR}/DerivedData.zip"
    before_run: []
  pipeline_shards_5:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cocoapods-install@2: {}
    - git::https://github.com/DamienBitrise/bitrise-test-plan-sharder.git@master:
        title: Bitrise Test Plan Sharder
        inputs:
        - xcode_project: Notes.xcodeproj
        - target: NotesUITests
        - shards: '5'
        - scheme: Notes
        - test_plan: Notes.xctestplan
        - debug_mode: 'true'
        - test_path: ''
        - file_type: ".swift"
    - script@1.1:
        title: Build for Testing
        inputs:
        - content: |+
            set -euxo pipefail
            echo "-- build-for-testing --"

            mkdir DerivedData

            xcodebuild \
            -scheme "Notes" \
            -workspace "Notes.xcworkspace" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPhone 8,OS=latest" \
            -derivedDataPath "${BITRISE_SOURCE_DIR}/DerivedData" \
            build-for-testing

    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #curl http://ipv4.download.thinkbroadband.com/1GB.zip --output "$BITRISE_SOURCE_DIR/1GB_1.zip"

            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_2.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_3.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_4.zip"
            #cp "$BITRISE_SOURCE_DIR/1GB_1.zip" "$BITRISE_SOURCE_DIR/1GB_5.zip"
        title: Download Large file
    - script@1.1:
        title: Compress Derived Data
        is_always_run: true
        inputs:
        - content: |
            set -euxo pipefail
            echo "-- compress --"

            exec zip -0 -qr \
                "${BITRISE_SOURCE_DIR}/DerivedData.zip" \
                "$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/Notes.app" \
                "$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Debug-iphonesimulator/NotesUITests-Runner.app" \
                "$BITRISE_SOURCE_DIR/DerivedData/Build/Products/Notes_Notes_iphonesimulator13.5-x86_64.xctestrun" \
                "$BITRISE_SOURCE_DIR/Notes.xcworkspace" \
                "$BITRISE_SOURCE_DIR/Notes.xcodeproj" \
                "$BITRISE_SOURCE_DIR/Notes.xctestplan" \
                "$BITRISE_SOURCE_DIR/TestShard_0.xctestplan" \
                "$BITRISE_SOURCE_DIR/TestShard_1.xctestplan" \
                "$BITRISE_SOURCE_DIR/TestShard_2.xctestplan" \
                "$BITRISE_SOURCE_DIR/TestShard_3.xctestplan" \
                "$BITRISE_SOURCE_DIR/TestShard_4.xctestplan"
            #    "$BITRISE_SOURCE_DIR/1GB_1.zip" \
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: "${BITRISE_SOURCE_DIR}/DerivedData.zip"
    before_run: []
  test_iPhone_11:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-parallel-testing-enabled
            YES \\\n-maximum-parallel-testing-workers $SIMS \\\n-destination \"platform=iOS
            Simulator,name=iPhone 11,OS=latest\" \\\n-retry-tests-on-failure \\\ntest-without-building\n\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults3.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  test_iPhone_12:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-parallel-testing-enabled
            YES \\\n-maximum-parallel-testing-workers $SIMS \\\n-destination \"platform=iOS
            Simulator,name=iPhone 12,OS=latest\" \\\n-retry-tests-on-failure \\\ntest-without-building\n\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults4.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  test_iPhone_13:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-parallel-testing-enabled
            YES \\\n-maximum-parallel-testing-workers $SIMS \\\n-destination \"platform=iOS
            Simulator,name=iPhone 13,OS=latest\" \\\n-retry-tests-on-failure \\\ntest-without-building\n\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults5.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  test_iPhone_8:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-parallel-testing-enabled
            YES \\\n-maximum-parallel-testing-workers $SIMS \\\n-destination \"platform=iOS
            Simulator,name=iPhone 8,OS=latest\" \\\n-retry-tests-on-failure \\\ntest-without-building\n\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults1.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  test_iPhone_8_plus:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-parallel-testing-enabled
            YES \\\n-maximum-parallel-testing-workers $SIMS \\\n-destination \"platform=iOS
            Simulator,name=iPhone 8 Plus,OS=latest\" \\\n-retry-tests-on-failure \\\ntest-without-building\n\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults2.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  tests_1:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\nrm Notes.xctestplan\n\ncp
            TestShard_0.xctestplan Notes.xctestplan\n\nchmod 644 Notes.xctestplan\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-testPlan
            \"Notes\" \\\n-parallel-testing-enabled YES \\\n-maximum-parallel-testing-workers
            $SIMS \\\n-destination \"platform=iOS Simulator,name=iPhone 8,OS=latest\"
            \\\n-retry-tests-on-failure \\\ntest-without-building\n\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults1.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  tests_2:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nls -la\n\nmv ./Users/vagrant/git/* .\n\nls -la\n\nrm Notes.xctestplan\n\ncp
            TestShard_1.xctestplan Notes.xctestplan\n\nchmod 644 Notes.xctestplan\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-testPlan
            \"Notes\" \\\n-parallel-testing-enabled YES \\\n-maximum-parallel-testing-workers
            $SIMS \\\n-destination \"platform=iOS Simulator,name=iPhone 8,OS=latest\"
            \\\n-retry-tests-on-failure \\\ntest-without-building\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults2.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  tests_3:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nmv ./Users/vagrant/git/* .\n\nrm Notes.xctestplan\n\ncp
            TestShard_2.xctestplan Notes.xctestplan\n\nchmod 644 Notes.xctestplan\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-testPlan
            \"Notes\" \\\n-parallel-testing-enabled YES \\\n-maximum-parallel-testing-workers
            $SIMS \\\n-destination \"platform=iOS Simulator,name=iPhone 8,OS=latest\"
            \\\n-retry-tests-on-failure \\\ntest-without-building\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults3.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  tests_4:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nmv ./Users/vagrant/git/* .\n\nrm Notes.xctestplan\n\ncp
            TestShard_3.xctestplan Notes.xctestplan\n\nchmod 644 Notes.xctestplan\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-testPlan
            \"Notes\" \\\n-parallel-testing-enabled YES \\\n-maximum-parallel-testing-workers
            $SIMS \\\n-destination \"platform=iOS Simulator,name=iPhone 8,OS=latest\"
            \\\n-retry-tests-on-failure \\\ntest-without-building\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults4.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  tests_5:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-artifact-pull.git@main:
        title: Pull artifacts
        inputs:
        - verbose: true
        - artifact_sources: stage_1.*
    - script@1.1:
        title: Unzip
        inputs:
        - content: |
            set -euxo pipefail

            echo "$BITRISE_ARTIFACT_PATHS"

            echo "-- unzip -- "

            exec unzip "${BITRISE_ARTIFACT_PATHS}"
    - script@1.1:
        title: Test without Building
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x \n\nmv ./Users/vagrant/git/* .\n\nrm Notes.xctestplan\n\ncp
            TestShard_4.xctestplan Notes.xctestplan\n\nchmod 644 Notes.xctestplan\n\necho
            \"-- test-without-building --\"\n\nxcodebuild \\\n-workspace \"Notes.xcworkspace\"
            \\\n-scheme \"Notes\" \\\n-sdk iphonesimulator \\\n-resultBundlePath \"xcodebuild.xcresult\"
            \\\n-derivedDataPath \"/Users/vagrant/git/DerivedData\" \\\n-testPlan
            \"Notes\" \\\n-parallel-testing-enabled YES \\\n-maximum-parallel-testing-workers
            $SIMS \\\n-destination \"platform=iOS Simulator,name=iPhone 8,OS=latest\"
            \\\n-retry-tests-on-failure \\\ntest-without-building\n"
    - script@1.1:
        title: Compress Result Bundle
        is_always_run: true
        inputs:
        - content: |-
            set -euxo pipefail
            echo "-- compress --"

            cd "${BITRISE_DEPLOY_DIR}/"

            exec zip -qr \
                "${BITRISE_DEPLOY_DIR}/TestResults5.zip" \
                "/Users/vagrant/git/xcodebuild.xcresult"
    - deploy-to-bitrise-io@2: {}
    before_run: []
  ui_test_api26:
    steps:
    - script@1:
        title: ui_test_api26 Web
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "ui_test_api26 Repo"
  ui_test_api30:
    steps:
    - script@1:
        title: ui_test_api30 Web
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "ui_test_api30 Repo"
  ui_test_prepare:
    steps:
    - script@1:
        title: ui_test_prepare Web
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "ui_test_prepare Repo"
  ui_test_shard_1:
    steps:
    - script@1:
        title: Shard 1 Web
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Shard 1 Repo"
  ui_test_shard_2:
    steps:
    - script@1:
        title: Shard 2 Web
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Shard 2 Repo"
app:
  envs:
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: Notes.xcworkspace
  - opts:
      is_expand: false
    BITRISE_SCHEME: Notes
  - opts:
      is_expand: false
    BITRISE_EXPORT_METHOD: development
  - opts:
      is_expand: false
    SIMS: '1'
meta:
  bitrise.io:
    stack: osx-xcode-13.1.x
    machine_type_id: g2.4core
